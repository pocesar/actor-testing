{
    "title": "Input schema for the apify_project actor.",
    "type": "object",
    "schemaVersion": 1,
    "properties": {
        "testSpec": {
            "title": "Test spec",
            "type": "string",
            "description": "Write your tests here like you would in a .spec jasmine file. Refer to the README for matchers information",
            "prefill": "({ it, xit, moment, _, run, expect, expectAsync, input, describe }) => {\n    (input.resource ? [\n        'beta',\n    ] : [\n        'latest',\n    ]).forEach((build) => {\n        describe(`${build} version`, () => {\n            it('test something-task', async () => {\n                const runResult = await run({\n                    taskId: '',\n                });\n\n                await expectAsync(runResult).toHaveStatus('SUCCEEDED');\n                await expectAsync(runResult).withLog((log) => {\n                    expect(log)\n                        .withContext(runResult.format('ReferenceError'))\n                        .not.toContain('ReferenceError');\n                    expect(log)\n                        .withContext(runResult.format('TypeError'))\n                        .not.toContain('TypeError');\n                });\n\n                await expectAsync(runResult).withStatistics((stats) => {\n                    expect(stats.requestsRetries)\n                        .withContext(runResult.format('Request retries'))\n                        .toBeLessThan(3);\n\n                    expect(stats.crawlerRuntimeMillis)\n                        .withContext(runResult.format('Run time'))\n                        .toBeWithinRange(0.1 * 60000, 10 * 60000);\n                });\n\n                await expectAsync(runResult).withDataset(({ dataset, info }) => {\n                    expect(info.cleanItemCount)\n                        .withContext(runResult.format('Dataset cleanItemCount'))\n                        .toBeGreaterThan(0);\n\n                    expect(dataset.items)\n                        .withContext(runResult.format('Dataset items array'))\n                        .toBeNonEmptyArray();\n                });\n            });\n        });\n    });\n}",
            "editor": "javascript"
        },
        "testName": {
            "title": "Test Name",
            "description": "Pick a descriptive name for this test suite. Otherwise the task name will be used",
            "default": "",
            "type": "string",
            "editor": "textfield"
        },
        "defaultTimeout": {
            "title": "Default timeout",
            "description": "Changes the default timeout for each individual test, in milliseconds. Defaults to 5 minutes",
            "default": 1200000,
            "type": "integer",
            "editor": "number"
        },
        "verboseLogs": {
            "title": "Verbose Log",
            "description": "Print progress information",
            "type": "boolean",
            "default": true,
            "editor": "checkbox"
        },
        "abortRuns": {
            "title": "Abort runs",
            "type": "boolean",
            "default": true,
            "description": "Aborts the underlying actor runs upon aborting this actor as well",
            "editor": "checkbox"
        },
        "customData": {
            "title": "Custom data",
            "description": "Anything you may want to access through input.customData inside tests",
            "default": {},
            "type": "object",
            "editor": "json"
        },
        "filter": {
            "title": "Filter tests",
            "description": "You can filter tests providing their names here",
            "type": "array",
            "default": [],
            "editor": "stringList"
        },
        "email": {
            "title": "Email notification",
            "description": "Receive failing tests on the provided email",
            "type": "string",
            "default": "",
            "editor": "textfield"
        },
        "slackToken": {
            "title": "Slack token",
            "description": "Slack token",
            "type": "string",
            "editor": "textfield"
        },
        "retryFailedTests": {
            "title": "Retry failed tests",
            "description": "Retry failed tests one more time",
            "editor": "checkbox",
            "default": false,
            "type": "boolean"
        },
        "slackChannel": {
            "title": "Slack channel",
            "description": "Slack channel",
            "prefill": "#public-actors-tests-notifications",
            "type": "string",
            "editor": "textfield"
        },
        "slackPrefix": {
            "title": "Slack prefix",
            "description": "This string will be prepended to all slack messages",
            "prefill": "@lead-dev @actor-owner",
            "type": "string",
            "editor": "textfield"
        },
        "token": {
            "title": "Token",
            "description": "Optional account token",
            "type": "string",
            "editor": "textfield"
        }
    },
    "required": []
}
